/* tslint:disable */
/* eslint-disable */
/**
 * MNCOTP
 * MNCOTP API Design Spec
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UsageModel,
    UsageModelFromJSON,
    UsageModelToJSON,
} from '../models';

/**
 * 
 */
export class UsageReportApi extends runtime.BaseAPI {

    /**
     * Get usage report
     */
    async usageGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UsageModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsageModelFromJSON));
    }

    /**
     * Get usage report
     */
    async usageGet(initOverrides?: RequestInit): Promise<Array<UsageModel>> {
        const response = await this.usageGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create Usage Report
     */
    async usagePostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-KEY"] = this.configuration.apiKey("X-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/usage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Usage Report
     */
    async usagePost(initOverrides?: RequestInit): Promise<void> {
        await this.usagePostRaw(initOverrides);
    }

}
