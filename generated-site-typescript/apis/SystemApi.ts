/* tslint:disable */
/* eslint-disable */
/**
 * MNCOTP
 * MNCOTP API Design Spec
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OTPMethods,
    OTPMethodsFromJSON,
    OTPMethodsToJSON,
    Pricing,
    PricingFromJSON,
    PricingToJSON,
} from '../models';

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Get all available method
     */
    async methodsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<OTPMethods>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-KEY"] = this.configuration.apiKey("X-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OTPMethodsFromJSON(jsonValue));
    }

    /**
     * Get all available method
     */
    async methodsGet(initOverrides?: RequestInit): Promise<OTPMethods> {
        const response = await this.methodsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get pricing
     */
    async pricingGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Pricing>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-KEY"] = this.configuration.apiKey("X-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/pricing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingFromJSON(jsonValue));
    }

    /**
     * Get pricing
     */
    async pricingGet(initOverrides?: RequestInit): Promise<Pricing> {
        const response = await this.pricingGetRaw(initOverrides);
        return await response.value();
    }

}
