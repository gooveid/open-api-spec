/* tslint:disable */
/* eslint-disable */
/**
 * MNCOTP
 * MNCOTP API Design Spec
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CallbackModel,
    CallbackModelFromJSON,
    CallbackModelToJSON,
} from '../models';

export interface CallbackPostRequest {
    callbackModel?: CallbackModel;
}

/**
 * 
 */
export class CallbackApi extends runtime.BaseAPI {

    /**
     * Get team callback
     */
    async callbackGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CallbackModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallbackModelFromJSON(jsonValue));
    }

    /**
     * Get team callback
     */
    async callbackGet(initOverrides?: RequestInit): Promise<CallbackModel> {
        const response = await this.callbackGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Team callback
     */
    async callbackPostRaw(requestParameters: CallbackPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CallbackModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-KEY"] = this.configuration.apiKey("X-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallbackModelToJSON(requestParameters.callbackModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallbackModelFromJSON(jsonValue));
    }

    /**
     * Set Team callback
     */
    async callbackPost(requestParameters: CallbackPostRequest, initOverrides?: RequestInit): Promise<CallbackModel> {
        const response = await this.callbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
